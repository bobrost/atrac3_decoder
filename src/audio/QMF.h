#pragma once

#include <vector>
#include "../util/ArrayUtil.h"

namespace Qmf {

  // Mirror a half-array of coefficients to produce the full set. The scale should
  // generally be 1 for encoding (split and downsample) and 2 For decoding (combine
  // and upsample).
  FloatArray mirrorCoefficients(const FloatArray& halfCoefficients, float scale);

  // Perform a single sample step of QMF upsampling and recombination, using
  // the given lowpass and highpass input samples and demodulation history state.
  // For multiple QMF subbands and recombination stages, each of those input streams
  // must maintain its own demodulation history buffer. The lowpass and highpass
  // values come from the buffers generated by a previout QMF splitting operation.
  // @param coefficients The full mirrored QMF decoding coefficient array
  // @param lowpass A single sample of input from the lowpass buffer
  // @param highpass A single sample of input from the highpass buffer
  // @param demodulationBuffer The history state for this QMF buffer, will be
  //   updated by this call. Must be at least the same size as the coefficients array.
  // @param outSample1 The first of two consecutive output samples
  // @param outSample2 The second of two consecutive output samples
  void qmfCombineUpsample(
    const FloatArray& coefficients,
    float lowpass, float highpass,
    HistoryBuffer& demodulationBuffer,
    float& outSample1, float& outSample2);

  // Consecutively process all samples for a buffer of QMF data.
  // Lowpass and highpass buffers must be same input size.
  void qmfCombineUpsample(
    const FloatArray& coefficients,
    const FloatArray& lowpass,
    const FloatArray& highpass,
    HistoryBuffer& demodulationBuffer,
    FloatArray& appendToOutput);

  // Two-stage QMF recombination upsampler for ATRAC3 decoding, combining and
  // upsampling 4 subbands to 1 output signal.
  class QuadBandUpsampler {
    public:
      void init(const FloatArray& halfCoefficients, float decodingScale);

      void clear();

      // Simultaneously process one input sample from each of the
      // 4 subbands, and generate 4 consecutive output samples.
      void combineSubbands(
        float b0, float b1, float b2, float b3,
        float& out0, float& out1, float& out2, float& out3);

      // Process multiple samples from the given subband buffers
      // @param b0 The lowest subband
      // @param b1 The next-lowest subband
      // @param b2 The next-highest subband
      // @param b3 The highest subband
      // @param numInputSamples The number of samples to read from each input subband
      // @param outputAppendTarget The array where output samples should be appended,
      //   will be resized as needed.
      // @return Number of output samples generated
      int combineSubbands(
        const FloatArray& b0, const FloatArray& b1,
        const FloatArray& b2, const FloatArray& b3,
        int numInputSamples,
        FloatArray& outputAppendTarget);
      // TODO: delay 46(?) samples before starting output

    private:
      FloatArray _coefficients;
      int _numCoefficients;
      HistoryBuffer _history01;
      HistoryBuffer _history32; //Note: bands 2 and 3 are swapped
      HistoryBuffer _history0132;
  };

} // namespace
