#pragma once

#include <nlohmann/json.hpp>

// Schema of the JSON file generated by my instrumented ffmpeg atrac.
namespace TestSchema {

  // QmfStage: represents a stage of QMF decoding
  struct QmfStage {
    std::vector<float> low;
    std::vector<float> high;
    std::vector<float> out;
    NLOHMANN_DEFINE_TYPE_INTRUSIVE(QmfStage, low,high,out)
  };

  // QmfStages: collection of QMF stages for a channel
  struct QmfStages {
    int channel;
    QmfStage stage01;
    QmfStage stage32;
    QmfStage stage0123;
    NLOHMANN_DEFINE_TYPE_INTRUSIVE(QmfStages, stage01, stage32, stage0123)
  };

  struct AtracGainPoint {
    int loc;
    int level;
    NLOHMANN_DEFINE_TYPE_INTRUSIVE(AtracGainPoint, loc, level);
  };

  // AtracSchemaBand: inverse-MDCT values for subbands
  struct AtracSchemaBand {
    int index = 0;
    std::vector<float> frequencies;    // 256 values
    std::vector<float> imdct;          // 512 values
    std::vector<float> imdctWindowed;  // 512 values
    std::vector<float> gainMixOverlap; // 256 values
    std::vector<AtracGainPoint> gain; // variable size
    std::vector<float> gainScale; // 256 values, the gain compensation array without the PCM mix
    NLOHMANN_DEFINE_TYPE_INTRUSIVE(AtracSchemaBand, frequencies, imdct, imdctWindowed, gainMixOverlap, gainScale, gain)
  };

  // AtracSchemaChannel: decoded channel information
  struct AtracSchemaChannel {
    int index = 0;
    int channel;                        // 0=left, 1=right
    int codingMode;                     // Joint stereo or separate
    int numBandsCoded;                  // How many subbands are encoded
    std::vector<float> spectrum;       // 1024-value spectrum
    std::vector<AtracSchemaBand> bands; // 4 subbands
    QmfStages qmf;                      // QMF stages
    NLOHMANN_DEFINE_TYPE_INTRUSIVE(AtracSchemaChannel, \
      channel,codingMode,numBandsCoded,spectrum,bands,qmf)
  };

  // AtracSchemaFrame: single frame decoding
  struct AtracSchemaFrame {
    int index = 0;
    std::vector<uint8_t> bytes;                   // 384 bytes
    std::vector<AtracSchemaChannel> channels; // Left and right channels
    NLOHMANN_DEFINE_TYPE_INTRUSIVE(AtracSchemaFrame, bytes,channels)
  };

  // AtracSchema: Top-level structure
  struct AtracSchema {
    void initIndices();

    int samplesPerFrame;                  // 2048 for LP2
    int delay;                            // 2190 for LP2
    int codingMode;                       // 0x12 (JOINT_STEREO) or 0x2
    int channels;                         // 2=stereo, 1=mono
    bool jointStereo;                     // Joint stereo mode flag
    std::vector<AtracSchemaFrame> frames; // Decoded frames
    NLOHMANN_DEFINE_TYPE_INTRUSIVE(AtracSchema, \
      samplesPerFrame,delay,codingMode,channels,jointStereo,frames)
  };
}

